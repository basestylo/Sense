version: 2
jobs:
  linter-app:
    docker:
      - image: elixir:1.7.4
    steps:
      - setup_remote_docker
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y build-essential libpq-dev nodejs locales
            echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
      - run: locale-gen
      - checkout
      - restore_cache:
          keys:
            - v2-mix-build-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
            - v2-mix-build-cache-{{ .Branch }}
            - v2-mix-build-cache
      - restore_cache:
          keys:
            - v2-mix-deps-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
            - v2-mix-deps-cache-{{ .Branch }}
            - v2-mix-deps-cache
      - run: mix local.hex --force && mix local.rebar --force
      - run: cd app && mix deps.get
      - run: cd app && mix credo list --strict
      - save_cache:
          key: v2-mix-deps-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
          paths: "./app/deps"
      - save_cache:
          key: v2-mix-deps-cache-{{ .Branch }}
          paths: "./app/deps"
      - save_cache:
          key: v2-mix-deps-bundle-cache
          paths: "./app/deps"

  build-app:
    docker:
      - image: elixir:1.7.4
        environment:
          - MIX_ENV=test
          - PG_USERNAME=sense
          - PG_PASSWORD=sense
          - PG_HOST=localhost
          - INFLUXDB_HOST=localhost
          - MQTT_HOST=localhost
      - image: influxdb:1.6
      - image: eclipse-mosquitto:latest
      - image: postgres:9.6.3-alpine
        environment:
          - POSTGRES_USER=sense
          - POSTGRES_PASSWORD=sense
          - POSTGRES_DB=sense_test
    steps:
      - setup_remote_docker
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y build-essential libpq-dev nodejs locales
            echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
      - run: locale-gen
      - checkout
      - restore_cache:
          keys:
            - v3-mix-build-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
            - v3-mix-build-cache-{{ .Branch }}
            - v3-mix-build-cache
      - restore_cache:
          keys:
            - v2-mix-deps-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
            - v2-mix-deps-cache-{{ .Branch }}
            - v2-mix-deps-cache
      - run: mix local.hex --force && mix local.rebar --force
      - run: cd app && mix deps.get
      - save_cache:
          key: v2-mix-deps-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
          paths: "./app/deps"
      - save_cache:
          key: v2-mix-deps-cache-{{ .Branch }}
          paths: "./app/deps"
      - save_cache:
          key: v2-mix-deps-bundle-cache
          paths: "./app/deps"
      - run: cd app && mix test
      - save_cache:
          key: v2-mix-build-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
          paths: "./app/_build"
      - save_cache:
          key: v2-mix-build-cache-{{ .Branch }}
          paths: "./app/_build"
      - save_cache:
          key: v2-mix-build-bundle-cache
          paths: "./app/_build"
      - store_test_results:
          path: "./app/tmp/reports"

  build-web:
    docker:
      - image: node:10.12-slim
        environment:
          - CHROME_BIN=/usr/bin/chromium
    steps:
      - setup_remote_docker
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y build-essential inotify-tools chromium
      - checkout
      - restore_cache:
          keys:
            - v2-npm-build-cache-{{ .Branch }}-{{ checksum "web/package-lock.json" }}
            - v2-npm-build-cache-{{ .Branch }}
            - v2-npm-build-cache
      - run: cd web && npm install --silent
      - save_cache:
          key: v2-npm-build-cache-{{ .Branch }}-{{ checksum "web/package-lock.json" }}
          paths: "./web/node_modules"
      - save_cache:
          key: v2-npm-build-cache-{{ .Branch }}
          paths: "./web/node_modules"
      - save_cache:
          key: v2-npm-build-bundle-cache
          paths: "./web/node_modules"
      - run: cd web && npm run test-headless
      - run: cd web && npm run e2e

  linter-web:
    docker:
      - image: node:10.12-slim
    steps:
      - setup_remote_docker
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y build-essential inotify-tools
      - checkout
      - restore_cache:
          keys:
            - v2-npm-build-cache-{{ .Branch }}-{{ checksum "web/package-lock.json" }}
            - v2-npm-build-cache-{{ .Branch }}
            - v2-npm-build-cache
      - run: cd web && npm install --silent
      - save_cache:
          key: v2-npm-build-cache-{{ .Branch }}-{{ checksum "web/package-lock.json" }}
          paths: "./web/node_modules"
      - save_cache:
          key: v2-npm-build-cache-{{ .Branch }}
          paths: "./web/node_modules"
      - save_cache:
          key: v2-npm-build-bundle-cache
          paths: "./web/node_modules"
      - run: cd web && npm run lint

  deploy-web:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - v2-npm-deps-cache-{{ .Branch }}-{{ checksum "web/package-lock.json" }}
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y kubectl gettext-base
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
          gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - run: cd infra && ./deploy-web.sh
      - save_cache:
          key: v2-npm-deps-cache-{{ .Branch }}-{{ checksum "web/package-lock.json" }}
          paths: "./web/node_modules"
      - run: ls -alh
      - run: ls -alh web

  deploy-app:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - v3-mix-build-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
      - restore_cache:
          keys:
            - v2-mix-deps-cache-{{ .Branch }}-{{ checksum "app/mix.lock" }}
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y kubectl gettext-base
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
          gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      - run: cd infra && ./deploy-app.sh

  deploy-mqtt:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "Install base deps"
          command: |
            apt-get update -qq
            apt-get install -y kubectl gettext-base
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
          gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - run: cd infra && ./deploy-mqtt.sh

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-web
      - build-app
      - linter-web
      - linter-app
      - deploy-web:
          requires:
            - build-app
          filters:
            branches:
              only: master
      - deploy-app:
          requires:
            - build-app
          filters:
            branches:
              only: master
      - approval-mqtt-deploy:
          type: approval
          filters:
            branches:
              only: master
      - deploy-mqtt:
          requires:
            - approval-mqtt-deploy
